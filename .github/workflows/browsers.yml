name: Browser Test

on:
  push:
    branches: [master, develop]
  pull_request:
    branches: [master, develop]
  workflow_dispatch:

jobs:
  test-https:
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/playwright:v1.54.0-noble
      env:
        HOME: /root
    strategy:
      matrix:
        browser: [curl, chromium, firefox, webkit]
      fail-fast: false

    steps:
      - uses: actions/checkout@v4

      - name: Configure git safe directory
        run: git config --global --add safe.directory $GITHUB_WORKSPACE

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Install just
        uses: extractions/setup-just@v2

      - name: Setup Node.js
        if: matrix.browser != 'curl'
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Playwright dependency
        if: matrix.browser != 'curl'
        run: |
          npm init -y
          npm install --save-dev playwright@latest

      - name: Install Caddy
        run: |
          apt update
          apt install -y caddy

      - name: Build ReactorCA
        run: just build

      - name: Create test directory structure
        run: |
          mkdir -p /var/lib/test/caddy/site
          mkdir -p /var/lib/test/certs

      - name: Create test HTML page
        run: |
          cat > /var/lib/test/caddy/site/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <title>ReactorCA HTTPS Test</title>
              <style>
                  body { font-family: Arial, sans-serif; text-align: center; margin-top: 50px; }
                  .success { color: green; }
                  .cert-info { background: #f0f0f0; padding: 20px; margin: 20px; border-radius: 5px; }
              </style>
          </head>
          <body>
              <h1 class="success">HTTPS Working!</h1>
              <p>ReactorCA self-signed certificate is working correctly.</p>
              <div class="cert-info">
                  <h3>Certificate Information</h3>
                  <p>This page is served over HTTPS using a certificate generated by ReactorCA.</p>
                  <p>Domain: localhost</p>
                  <p>Generated: <span id="timestamp"></span></p>
              </div>
              <script>
                  document.getElementById('timestamp').textContent = new Date().toISOString();
              </script>
          </body>
          </html>
          EOF

      - name: Initialize ReactorCA
        env:
          REACTOR_CA_PASSWORD: "test-password-123"
        run: |
          cd /var/lib/test
          $GITHUB_WORKSPACE/ca init

      - name: Configure ReactorCA for localhost
        run: |
          cd /var/lib/test

          # Ensure CA config has env_var set for password-based encryption
          if grep -q "provider: password" config/ca.yaml; then
            # Add env_var if using password provider and it's missing
            if ! grep -q "env_var:" config/ca.yaml; then
              sed -i '/min_length:/a\    env_var: REACTOR_CA_PASSWORD' config/ca.yaml
            fi
          fi

          # Update hosts.yaml for localhost certificate
          cat > config/hosts.yaml << 'EOF'
          hosts:
            localhost:
              alternative_names:
                dns:
                  - localhost
                  - 127.0.0.1
                ip:
                  - 127.0.0.1
                  - ::1

              validity:
                years: 1

              key_algorithm: RSA2048
              hash_algorithm: SHA256

              export:
                cert: "/var/lib/test/certs/localhost.crt"
                chain: "/var/lib/test/certs/localhost-chain.crt"
                key_encrypted: "/var/lib/test/certs/localhost.key.age"
          EOF

      - name: Create CA certificate
        env:
          REACTOR_CA_PASSWORD: "test-password-123"
        run: |
          cd /var/lib/test
          $GITHUB_WORKSPACE/ca ca create

      - name: Issue localhost certificate
        env:
          REACTOR_CA_PASSWORD: "test-password-123"
        run: |
          cd /var/lib/test
          $GITHUB_WORKSPACE/ca host issue localhost

      - name: Export private key for Caddy
        env:
          REACTOR_CA_PASSWORD: "test-password-123"
        run: |
          cd /var/lib/test
          $GITHUB_WORKSPACE/ca host export-key localhost -o /var/lib/test/certs/localhost.key

      - name: Install CA certificate in system trust store
        if: matrix.browser != 'curl'
        run: |
          cd /var/lib/test

          # Install p11-kit for Firefox certificate support
          apt-get update
          apt-get install -y p11-kit p11-kit-modules

          # Install CA cert in system trust store
          cp store/ca/ca.crt /usr/local/share/ca-certificates/reactorca-test.crt
          update-ca-certificates

          # Set NODE_EXTRA_CA_CERTS for Node.js/Playwright
          echo "NODE_EXTRA_CA_CERTS=/etc/ssl/certs/ca-certificates.crt" >> $GITHUB_ENV

          # Also copy to common browser cert locations for fallback
          mkdir -p ~/.pki/nssdb
          certutil -A -n "ReactorCA Test" -t "TCu,Cu,Tu" -i store/ca/ca.crt -d ~/.pki/nssdb 2>/dev/null || true

      - name: Create Caddyfile
        run: |
          cat > /var/lib/test/caddy/Caddyfile << 'EOF'
          localhost:8443 {
              tls /var/lib/test/certs/localhost.crt /var/lib/test/certs/localhost.key
              root * /var/lib/test/caddy/site
              file_server

              header {
                  # Security headers for testing
                  Strict-Transport-Security "max-age=31536000; includeSubDomains"
                  X-Frame-Options "DENY"
                  X-Content-Type-Options "nosniff"
              }

              log {
                  output stdout
                  format console
              }
          }
          EOF

      - name: Start Caddy with test config
        run: |
          # Fix permissions so Caddy can read certificate files
          chmod 644 /var/lib/test/certs/*

          # Start Caddy directly with our test config (no systemd in container)
          cd /var/lib/test/caddy
          caddy start --config Caddyfile
          sleep 2

      - name: Test HTTPS connection - ${{ matrix.browser }}
        env:
          HOME: /root
        run: |
          cd /var/lib/test

          echo "=== Testing HTTPS connection with ${{ matrix.browser }} ==="

          if [ "${{ matrix.browser }}" = "curl" ]; then
            # Test with curl (ignore cert verification for self-signed)
            echo "Testing with curl..."
            curl -k -v https://localhost:8443/ > curl-output.txt 2>&1

            if grep -q "ReactorCA HTTPS Test" curl-output.txt; then
                echo "[PASS] HTTPS connection successful with curl"
                echo "[PASS] HTML content served correctly"
            else
                echo "[FAIL] HTTPS connection failed with curl"
                cat curl-output.txt
                exit 1
            fi

            # Check certificate details
            echo -e "\n=== Certificate Information ==="
            openssl s_client -connect localhost:8443 -servername localhost < /dev/null 2>/dev/null | openssl x509 -text -noout | head -20
          else
            # Test with real browser
            echo "Testing with ${{ matrix.browser }} browser..."

            # Run the browser test
            node $GITHUB_WORKSPACE/.github/workflows/support/browser-test.js ${{ matrix.browser }}
          fi

      - name: Test certificate validation
        run: |
          cd /var/lib/test

          echo "=== Validating certificate against CA ==="

          # Verify certificate chain
          if openssl verify -CAfile store/ca/ca.crt certs/localhost.crt; then
              echo "[PASS] Certificate validates against CA"
          else
              echo "[FAIL] Certificate validation failed"
              exit 1
          fi

          # Check certificate details
          echo -e "\n=== Certificate Details ==="
          openssl x509 -in certs/localhost.crt -text -noout | grep -A 10 "Subject Alternative Name"


      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.browser }}
          path: |
            /var/lib/test/store/
            /var/lib/test/certs/
            /var/lib/test/curl-output.txt
        if: always()
